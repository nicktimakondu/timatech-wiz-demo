# This workflow will build a docker container, publish it to Docker Hub
# and deploy it to GKE when there is a push to the "deploy"
# branch.
#
# To configure this workflow:
#
# 1. Enable the following Google Cloud APIs:
#
#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Google Kubernetes Engine (container.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
#    You can learn more about enabling APIs at
#    https://support.google.com/googleapi/answer/6158841.
#
# 2. Ensure that your repository contains the necessary configuration for your
#    Google Kubernetes Engine cluster, including deployment.yml,
#    kustomization.yml, service.yml, etc.
#
# 3. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.
#
#    Depending on how you authenticate, you will need to grant an IAM principal
#    permissions on Google Cloud:
#
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Kubernetes Engine Developer (roles/container.developer)
#
#    You can learn more about setting IAM permissions at
#    https://cloud.google.com/iam/docs/manage-access-other-resources
#
# 5. Change the values in the "env" block to match your values.

name: 'Wiz Scan, Docker Build, and Deploy to GKE'

on:
  push:
    branches:
      - deploy

env:
  PROJECT_ID: 'timakondu-lab-dev'
  IMAGE_REPO: ${{ secrets.DOCKER_USERNAME }}/timatech
  GKE_CLUSTER: 'projects/timakondu-lab-dev/locations/us-east1/clusters/timatech-lab-1' 
  GKE_ZONE: 'us-east1' 
  WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
  WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}
  WIZ_IAC_POLICY: "nixlab-iac-audit"
  WIZ_SECRETS_POLICY: "nixlab-secrets-audit"
  WIZ_VULN_POLICY: "nixlab-vuln-audit"
  WORKLOAD_IDENTITY_PROVIDER: 'projects/15919242737/locations/global/workloadIdentityPools/github-pool/providers/nt-github' 

jobs:
  
  Wiz-Security-Scans:
    name: "Wiz IaC & Directory Scan"
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Wiz CLI
        run: curl -o wizcli https://wizcli.app.wiz.io/latest/wizcli && chmod +x wizcli

      - name: Authenticate to Wiz
        run: ./wizcli auth --id "$WIZ_CLIENT_ID" --secret "$WIZ_CLIENT_SECRET"

      - name: Run Wiz CLI IaC Scan
        run: ./wizcli iac scan --path "." -p "$WIZ_IAC_POLICY" -p "$WIZ_SECRETS_POLICY" --tag github_action_run_id=${{ github.run_id }} -o iac-scan-results.sarif,sarif,true

      - name: Upload SARIF file IaC
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: iac-scan-results.sarif
          category: wiz-iac

      - name: Run Wiz CLI Directory Scan
        run: ./wizcli dir scan --path "." -p "$WIZ_VULN_POLICY" -p "$WIZ_SECRETS_POLICY" --tag github_action_run_id=${{ github.run_id }} -o dir-scan-results.sarif,sarif,true

      - name: Upload SARIF file Dir
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: dir-scan-results.sarif
          category: wiz-dir
  
  build-publish:
    name: 'Docker Build and Publish'
    runs-on: 'ubuntu-latest'
    needs: Wiz-Security-Scans
    
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # actions/checkout@v4

      - name: Set Image Tag
        id: tag
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build the latest Docker image
        run: docker build -t ${IMAGE_REPO}:${{ steps.tag.outputs.sha_short }} .
    
      - name: Push the latest Docker image
        run: docker push ${IMAGE_REPO}:${{ steps.tag.outputs.sha_short }}

  deploy:
    name: 'Deploy to GKE'
    runs-on: 'ubuntu-latest'
    needs: build-publish
    
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # actions/checkout@v4

      - name: Set Image Tag
        id: tag
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # Configure Workload Identity Federation and generate an access token.   
      # See https://github.com/google-github-actions/auth for more options,
      # including authenticating via a JSON credentials file.
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@f112390a2df9932162083945e46d439060d66ec2' # google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
          project_id: '${{ env.PROJECT_ID }}'
          service_account: github-actions@timakondu-lab-dev.iam.gserviceaccount.com

      # Get the GKE credentials so we can deploy to the cluster
      - name: 'Set up GKE credentials'
        uses: 'google-github-actions/get-gke-credentials@6051de21ad50fbb1767bc93c11357a49082ad116' # google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: '${{ env.GKE_CLUSTER }}'

      - name: Deploy to GKE
        run: |
          sed -i.bak "s|IMAGE_TAG|${{ steps.tag.outputs.sha_short }}|g" manifests/deployment.yml && \
          kubectl apply -f manifests/deployment.yml && \
          kubectl apply -f manifests/service.yml